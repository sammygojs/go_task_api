definitions:
  models.Project:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Work
        type: string
      user_id:
        example: 2
        type: integer
    type: object
  models.Task:
    properties:
      created_at:
        example: "2025-05-07T12:34:56Z"
        type: string
      id:
        example: 1
        type: integer
      project_id:
        example: 1
        type: integer
      status:
        example: in-progress
        type: string
      title:
        example: Buy milk
        type: string
      updated_at:
        example: "2025-05-07T13:34:56Z"
        type: string
      user_id:
        example: 2
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a task manager backend built with Go.
  title: Task Manager API
  version: "1.0"
paths:
  /projects:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
      security:
      - BearerAuth: []
      summary: Get all projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      parameters:
      - description: Project data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Project'
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - Projects
  /projects/{id}/tasks:
    get:
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get tasks for a specific project
      tags:
      - Projects
  /tasks:
    get:
      parameters:
      - description: Filter by Project ID
        in: query
        name: project_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all tasks for the logged-in user (optionally filtered by project)
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      parameters:
      - description: Task info
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - Tasks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
